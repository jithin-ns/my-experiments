Absolutely! Here's a **complete, copy-paste-ready example** of a React 19 + TypeScript app using **React Router v7** to implement:

* **Main Tabs:** `Tab1` and `Tab2`
* **Sub Tabs (same for both):** `search`, `create`, `draft`
* Fully working routing so that:

  * `/tab1/search` renders **Tab1Search**
  * `/tab2/search` renders **Tab2Search**
  * Navigating to `/tab1` or `/tab2` redirects to their respective `search` tabs
* **`TabLayout`** layout component that renders tab navigation and child routes via `<Outlet />`

---

## 🗂️ Project Structure

```
src/
├── App.tsx
├── main.tsx
├── routes/
│   ├── components.tsx
│   └── tabs.ts
├── layouts/
│   └── TabLayout.tsx
```

---

## 1. `routes/tabs.ts` – Tab definitions

```ts
// routes/tabs.ts
export const mainTabs = [
  {
    label: "Tab 1",
    path: "tab1",
    subTabs: [
      { label: "Search", path: "search" },
      { label: "Create", path: "create" },
      { label: "Draft", path: "draft" },
    ],
  },
  {
    label: "Tab 2",
    path: "tab2",
    subTabs: [
      { label: "Search", path: "search" },
      { label: "Create", path: "create" },
      { label: "Draft", path: "draft" },
    ],
  },
];
```

---

## 2. `routes/components.tsx` – Page components

```tsx
// routes/components.tsx
export function Tab1Search() {
  return <div>Tab 1 - Search Page</div>;
}
export function Tab1Create() {
  return <div>Tab 1 - Create Page</div>;
}
export function Tab1Draft() {
  return <div>Tab 1 - Draft Page</div>;
}

export function Tab2Search() {
  return <div>Tab 2 - Search Page</div>;
}
export function Tab2Create() {
  return <div>Tab 2 - Create Page</div>;
}
export function Tab2Draft() {
  return <div>Tab 2 - Draft Page</div>;
}
```

---

## 3. `layouts/TabLayout.tsx` – TabLayout component

```tsx
// layouts/TabLayout.tsx
import { Link, Outlet, useLocation } from "react-router-dom";
import { mainTabs } from "../routes/tabs";

export function TabLayout() {
  const location = useLocation();
  const pathSegments = location.pathname.split("/").filter(Boolean);
  const currentMain = pathSegments[0] ?? "tab1";

  const activeMainTab = mainTabs.find(t => t.path === currentMain) ?? mainTabs[0];

  return (
    <div>
      <nav style={{ display: "flex", gap: 8, marginBottom: 10 }}>
        {mainTabs.map(tab => (
          <Link
            key={tab.path}
            to={`/${tab.path}`}
            className={tab.path === currentMain ? "active" : ""}
          >
            {tab.label}
          </Link>
        ))}
      </nav>

      <nav style={{ display: "flex", gap: 8, marginBottom: 20 }}>
        {activeMainTab.subTabs.map(sub => {
          const to = `/${activeMainTab.path}/${sub.path}`;
          const isActive = location.pathname === to;
          return (
            <Link key={sub.path} to={to} className={isActive ? "active" : ""}>
              {sub.label}
            </Link>
          );
        })}
      </nav>

      <div style={{ padding: 12, border: "1px solid #ccc" }}>
        <Outlet />
      </div>
    </div>
  );
}
```

---

## 4. `App.tsx` – Define the router

```tsx
// App.tsx
import {
  createBrowserRouter,
  RouterProvider,
  Navigate,
  Outlet,
} from "react-router-dom";
import { TabLayout } from "./layouts/TabLayout";
import { mainTabs } from "./routes/tabs";

import {
  Tab1Search,
  Tab1Create,
  Tab1Draft,
  Tab2Search,
  Tab2Create,
  Tab2Draft,
} from "./routes/components";

// Helper to map components
const tabComponents: Record<string, Record<string, JSX.Element>> = {
  tab1: {
    search: <Tab1Search />,
    create: <Tab1Create />,
    draft: <Tab1Draft />,
  },
  tab2: {
    search: <Tab2Search />,
    create: <Tab2Create />,
    draft: <Tab2Draft />,
  },
};

// Create nested routes
const tabRoutes = Object.entries(tabComponents).map(([mainPath, subTabs]) => ({
  path: mainPath,
  children: [
    {
      index: true,
      element: <Navigate to="search" replace />,
    },
    ...Object.entries(subTabs).map(([subPath, element]) => ({
      path: subPath,
      element,
    })),
  ],
}));

const router = createBrowserRouter([
  {
    path: "/",
    element: <TabLayout />,
    children: [
      {
        index: true,
        element: <Navigate to="/tab1/search" replace />,
      },
      ...tabRoutes,
    ],
  },
]);

export default function App() {
  return <RouterProvider router={router} />;
}
```

---

## 5. `main.tsx` – Entry point

```tsx
// main.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

import "./styles.css"; // optional

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
```

---

## 6. Optional: `styles.css`

```css
/* styles.css */
.active {
  font-weight: bold;
  color: blue;
  text-decoration: underline;
}
```

---

## 🧪 Example Routes That Work

| Route          | Component Rendered          |
| -------------- | --------------------------- |
| `/tab1/search` | `Tab1Search`                |
| `/tab1/create` | `Tab1Create`                |
| `/tab2/draft`  | `Tab2Draft`                 |
| `/tab1`        | Redirects to `/tab1/search` |
| `/`            | Redirects to `/tab1/search` |

---

## ✅ Summary

This setup gives you:

* Nested tabs powered by route structure
* Shared sub-tab paths (`search`, `create`, `draft`)
* Different components rendered for the same sub-tab under different main tabs
* Clean, extensible layout (`TabLayout`)
* Full support for TypeScript + React Router v7

Let me know if you want this in a GitHub repo or live demo!
